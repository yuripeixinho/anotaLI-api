// <auto-generated />
using System;
using AL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AL.Data.Migrations
{
    [DbContext(typeof(ALContext))]
    partial class ALContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AL.Core.Domain.Categoria", b =>
                {
                    b.Property<int>("CategoriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriaID");

                    b.HasIndex("ContaID");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaID = 1,
                            Nome = "Frutas"
                        },
                        new
                        {
                            CategoriaID = 2,
                            Nome = "Verduras e Legumes"
                        },
                        new
                        {
                            CategoriaID = 3,
                            Nome = "Grãos e Cereais"
                        },
                        new
                        {
                            CategoriaID = 4,
                            Nome = "Laticínios"
                        },
                        new
                        {
                            CategoriaID = 5,
                            Nome = "Carnes e Peixes"
                        },
                        new
                        {
                            CategoriaID = 6,
                            Nome = "Bebidas"
                        },
                        new
                        {
                            CategoriaID = 7,
                            Nome = "Produtos de Limpeza"
                        },
                        new
                        {
                            CategoriaID = 8,
                            Nome = "Alimentos Enlatados"
                        },
                        new
                        {
                            CategoriaID = 9,
                            Nome = "Doces e Sobremesas"
                        },
                        new
                        {
                            CategoriaID = 10,
                            Nome = "Pães e Massas"
                        },
                        new
                        {
                            CategoriaID = 11,
                            Nome = "Especiarias e Temperos"
                        },
                        new
                        {
                            CategoriaID = 12,
                            Nome = "Produtos Congelados"
                        },
                        new
                        {
                            CategoriaID = 13,
                            Nome = "Snacks e Petiscos"
                        },
                        new
                        {
                            CategoriaID = 14,
                            Nome = "Condimentos"
                        },
                        new
                        {
                            CategoriaID = 15,
                            Nome = "Frutos Secos e Sementes"
                        });
                });

            modelBuilder.Entity("AL.Core.Domain.Conta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Contas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7318d839-ff36-48fd-92a9-3401ab215121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ac452c4-9649-4c4f-8e01-87a39da23685",
                            Email = "yuri@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de81e126-5436-43c1-8e23-e02ae3d49991",
                            Senha = "AQAAAAIAAYagAAAAEBetXPkYb4myWCUoS+w53eIcqBtq5un6kzi8EgY5kXkaDWBeGRvmAzIi/JEZpblXRg==",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2e81ad9b-54d4-4c3f-b6e7-0987654321fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13945932-178a-449a-925f-e61166a75304",
                            Email = "marcelo@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8d2a800-e99f-42c1-a659-df69f00e4eae",
                            Senha = "AQAAAAIAAYagAAAAEJIK61UE+3YzbIzvKpEXJZQ8+oiG9wKPLw5ntv0x3clwXVh3QnhXSJ5rpvLgduyYAQ==",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("AL.Core.Domain.DimPeriodoFeira", b =>
                {
                    b.Property<int>("DimPeriodoFeiraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.HasKey("DimPeriodoFeiraID");

                    b.ToTable("DimPeriodoFeiras");

                    b.HasData(
                        new
                        {
                            DimPeriodoFeiraID = 1,
                            Periodo = "Diária"
                        },
                        new
                        {
                            DimPeriodoFeiraID = 2,
                            Periodo = "Semanal"
                        },
                        new
                        {
                            DimPeriodoFeiraID = 3,
                            Periodo = "Quinzenal"
                        },
                        new
                        {
                            DimPeriodoFeiraID = 4,
                            Periodo = "Mensal"
                        });
                });

            modelBuilder.Entity("AL.Core.Domain.PerfilConta", b =>
                {
                    b.Property<int>("PerfilContaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContaID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("PerfilContaID");

                    b.HasIndex("ContaID");

                    b.ToTable("PerfilContas");
                });

            modelBuilder.Entity("AL.Core.Domain.Produto", b =>
                {
                    b.Property<int>("ProdutoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DimPeriodoFeiraID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("PerfilContaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unidade")
                        .HasColumnType("TEXT");

                    b.HasKey("ProdutoID");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("DimPeriodoFeiraID");

                    b.HasIndex("PerfilContaID");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            ProdutoID = 1,
                            CategoriaID = 4,
                            DimPeriodoFeiraID = 2,
                            Nome = "Leite",
                            PerfilContaID = 1,
                            Quantidade = 1,
                            Unidade = "un"
                        },
                        new
                        {
                            ProdutoID = 2,
                            CategoriaID = 9,
                            DimPeriodoFeiraID = 3,
                            Nome = "Cacau",
                            PerfilContaID = 2,
                            Quantidade = 3,
                            Unidade = "un"
                        },
                        new
                        {
                            ProdutoID = 3,
                            CategoriaID = 3,
                            DimPeriodoFeiraID = 4,
                            Nome = "Feijão",
                            PerfilContaID = 4,
                            Quantidade = 5,
                            Unidade = "un"
                        },
                        new
                        {
                            ProdutoID = 5,
                            CategoriaID = 3,
                            DimPeriodoFeiraID = 4,
                            Nome = "Arroz",
                            PerfilContaID = 5,
                            Quantidade = 3,
                            Unidade = "un"
                        },
                        new
                        {
                            ProdutoID = 6,
                            CategoriaID = 10,
                            DimPeriodoFeiraID = 1,
                            Nome = "Macarrão",
                            PerfilContaID = 5,
                            Quantidade = 8,
                            Unidade = "un"
                        },
                        new
                        {
                            ProdutoID = 7,
                            CategoriaID = 7,
                            DimPeriodoFeiraID = 4,
                            Nome = "Desinfetante",
                            PerfilContaID = 3,
                            Quantidade = 1,
                            Unidade = "un"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AL.Core.Domain.Categoria", b =>
                {
                    b.HasOne("AL.Core.Domain.Conta", "Conta")
                        .WithMany("Categorias")
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Conta");
                });

            modelBuilder.Entity("AL.Core.Domain.PerfilConta", b =>
                {
                    b.HasOne("AL.Core.Domain.Conta", "Conta")
                        .WithMany("PerfilContas")
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");
                });

            modelBuilder.Entity("AL.Core.Domain.Produto", b =>
                {
                    b.HasOne("AL.Core.Domain.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AL.Core.Domain.DimPeriodoFeira", "DimPeriodoFeira")
                        .WithMany()
                        .HasForeignKey("DimPeriodoFeiraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AL.Core.Domain.PerfilConta", "PerfilConta")
                        .WithMany("Produtos")
                        .HasForeignKey("PerfilContaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("DimPeriodoFeira");

                    b.Navigation("PerfilConta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AL.Core.Domain.Conta", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AL.Core.Domain.Conta", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AL.Core.Domain.Conta", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AL.Core.Domain.Conta", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AL.Core.Domain.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("AL.Core.Domain.Conta", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("PerfilContas");
                });

            modelBuilder.Entity("AL.Core.Domain.PerfilConta", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
